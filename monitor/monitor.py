import os
import psutil
import telebot
import logging
import matplotlib.pyplot as plt

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ALERT_BOT_TOKEN = os.getenv("ALERT_BOT_TOKEN")
bot = telebot.TeleBot(ALERT_BOT_TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename="monitor.log", level=logging.ERROR, format="%(asctime)s - %(levelname)s - %(message)s")

# –§—É–Ω–∫—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
def get_uptime():
    try:
        with open("/proc/uptime", "r") as f:
            uptime_seconds = float(f.readline().split()[0])
            uptime_hours = uptime_seconds / 3600
            return f"üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã: {uptime_hours:.2f} —á–∞—Å–æ–≤"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è uptime: {e}")
        return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è uptime: {e}"

def get_cpu_load():
    try:
        cpu_load = psutil.cpu_percent(interval=1)
        return f"üî• –ó–∞–≥—Ä—É–∑–∫–∞ CPU: {cpu_load}%"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ CPU: {e}")
        return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ CPU: {e}"

def get_ram_usage():
    try:
        mem = psutil.virtual_memory()
        return f"üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM: {mem.used / (1024**3):.2f} –ì–ë / {mem.total / (1024**3):.2f} –ì–ë ({mem.percent}%)"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è RAM: {e}")
        return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è RAM: {e}"

def get_disk_usage():
    try:
        disk = psutil.disk_usage("/")
        return f"üíÄ –î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ –¥–∏—Å–∫–µ: {disk.free / (1024**3):.2f} –ì–ë –∏–∑ {disk.total / (1024**3):.2f} –ì–ë ({disk.percent}% –∑–∞–Ω—è—Ç–æ)"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: {e}")
        return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: {e}"

def get_active_connections():
    try:
        connections = len(psutil.net_connections(kind="inet"))
        return f"üåê –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {connections}"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {e}")
        return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {e}"

def generate_graph():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ CPU –∏ RAM"""
    try:
        cpu_load = psutil.cpu_percent(interval=1)
        ram_usage = psutil.virtual_memory().percent

        labels = ["CPU Load", "RAM Usage"]
        values = [cpu_load, ram_usage]

        plt.figure(figsize=(5, 3))
        plt.bar(labels, values, color=["red", "blue"])
        plt.ylabel("–ü—Ä–æ—Ü–µ–Ω—Ç (%)")
        plt.title("–ó–∞–≥—Ä—É–∑–∫–∞ CPU –∏ RAM")
        plt.ylim(0, 100)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        graph_path = "system_graph.png"
        plt.savefig(graph_path)
        plt.close()
        return graph_path
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status
@bot.message_handler(commands=['status'])
def send_status(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã —Å –≥—Ä–∞—Ñ–∏–∫–æ–º"""
    report = "\n".join([
        get_uptime(),
        get_cpu_load(),
        get_ram_usage(),
        get_disk_usage(),
        get_active_connections()
    ])

    bot.send_message(message.chat.id, f"üìä *–°–∏—Å—Ç–µ–º–Ω—ã–π —Å—Ç–∞—Ç—É—Å:*\n\n{report}", parse_mode="Markdown")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    graph_path = generate_graph()
    if graph_path:
        with open(graph_path, "rb") as photo:
            bot.send_photo(message.chat.id, photo)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    bot.send_message(message.chat.id, "‚úÖ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /status, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    bot.infinity_polling()
